unit c_Printer;

interface
uses
System.SysUtils, System.Classes, mpComPort, PrinterThread;

//==============================================================================
type

  TPrinter = class(TObject)
  private
    Com: TmpComPort;
    Thread: TPrinterThread;


    function GetPort: Byte;
    procedure SetPort(const AValue: Byte);
    function GetBaudRate: Integer;
    procedure SetBaudRate(const Value: Integer);
    function IsRunning: Boolean;
    procedure ThreadTerminated(ASender: TObject);

  public
    OnStop: TNotifyEvent;

    constructor Create;
    destructor Destroy; override;

    procedure Start;
    procedure Stop;

    property Port: Byte read GetPort write SetPort;
    property BaudRate: Integer read GetBaudRate write SetBaudRate;
    property Running: Boolean read IsRunning;

  end;

//==============================================================================
var
  Printer: TPrinter;

//==============================================================================
implementation
{ TPrinter }

constructor TPrinter.Create;
begin
  inherited Create;
  Com := TmpComPort.Create(nil);
end;

destructor TPrinter.Destroy;
begin
  FreeAndNil(Com);
  inherited Destroy;
end;

function TPrinter.GetBaudRate: Integer;
begin
  Result := Com.Baudrate;
end;

function TPrinter.GetPort: Byte;
begin
  Result := Com.Port;
end;

function TPrinter.IsRunning: Boolean;
begin
  Result := Assigned(Thread);
end;

procedure TPrinter.SetBaudRate(const Value: Integer);
begin
  Com.BaudRate := Value;
end;

procedure TPrinter.SetPort(const AValue: Byte);
begin
  Com.Port := AValue;
end;


procedure TPrinter.Start;
begin
  if not Assigned(Thread) then
  begin
    Thread := TPrinterThread.Create;
    Thread.OnTerminate := ThreadTerminated;
  end;
end;


procedure TPrinter.Stop;
begin
  Thread.Terminate;
end;


procedure TPrinter.ThreadTerminated(ASender: TObject);
begin
  Thread := nil;
  if Assigned(OnStop) then OnStop(Self);
end;

end.

